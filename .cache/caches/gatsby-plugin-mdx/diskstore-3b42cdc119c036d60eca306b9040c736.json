{"expireTime":9007200861963841000,"key":"gatsby-plugin-mdx-entire-payload-536bd4a8773d391fc6fbaa7c148131e5-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"GitHub CI/CD Workflow","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":24,"offset":24},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":24,"offset":24},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here below is a sample workflow. In this workflow,","position":{"start":{"line":3,"column":1,"offset":25},"end":{"line":3,"column":51,"offset":75},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":25},"end":{"line":3,"column":51,"offset":75},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Required dependencies are installed.","position":{"start":{"line":5,"column":4,"offset":80},"end":{"line":5,"column":40,"offset":116},"indent":[]}}],"position":{"start":{"line":5,"column":4,"offset":80},"end":{"line":5,"column":40,"offset":116},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":77},"end":{"line":5,"column":40,"offset":116},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Deepcode (Synk Deepcode - deepcode.ai) and CodeIntel (Microsoft AppInspector) are run.","position":{"start":{"line":6,"column":4,"offset":120},"end":{"line":6,"column":90,"offset":206},"indent":[]}}],"position":{"start":{"line":6,"column":4,"offset":120},"end":{"line":6,"column":90,"offset":206},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":117},"end":{"line":6,"column":90,"offset":206},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Finally, Inspektre commands is run as below.","position":{"start":{"line":7,"column":4,"offset":210},"end":{"line":7,"column":48,"offset":254},"indent":[]}}],"position":{"start":{"line":7,"column":4,"offset":210},"end":{"line":7,"column":48,"offset":254},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":207},"end":{"line":7,"column":48,"offset":254},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":77},"end":{"line":7,"column":48,"offset":254},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode","position":{"start":{"line":9,"column":1,"offset":256},"end":{"line":9,"column":122,"offset":377},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":256},"end":{"line":9,"column":122,"offset":377},"indent":[]}},{"type":"code","lang":"name:","meta":"\"Inspektre Scan\"","value":"on: push\njobs:\n  scan:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Perform DeepCode analysis\n        uses: georgismitev/deepcode-code-scanning-analysis@master\n        env:\n          DEEPCODE_TOKEN: ${{secrets.DEEPCODE_TOKEN}}\n      - name: codeintel\n        uses: inspektre/codeintel-gh@v1\n      - name: setup-node\n        uses: actions/setup-node@v2-beta\n        with:\n          node-version: '14'\n      - name: install inspektre\n        env:\n          NPM_CONFIG_PREFIX: \"~/.npm-global\"\n        run: |\n          export PATH=\"$(yarn global bin):$PATH\"\n          yarn global add @inspektre/inspektre\n      - name: inspektre inspect\n        env:\n          INSPEKTRE_TOKEN: ${{secrets.INSPEKTRE_TOKEN}}\n          INSPEKTRE_CLIENT_ID: ${{secrets.INSPEKTRE_CLIENT_ID}}\n          INSPEKTRE_CLIENT_SECRET: ${{secrets.INSPEKTRE_CLIENT_SECRET}}\n        run: |\n          ~/.npm-global/bin/inspektre reauthorize\n          ~/.npm-global/bin/inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode","position":{"start":{"line":11,"column":1,"offset":379},"end":{"line":43,"column":4,"offset":1523},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Creating a new project\",\"metaTitle\":\"Inspektre | Create\",\"metaDescription\":\"Inspektre Create Project\"}","position":{"start":{"line":45,"column":1,"offset":1525},"end":{"line":45,"column":141,"offset":1665},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":45,"column":141,"offset":1665}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating a new project\",\n  \"metaTitle\": \"Inspektre | Create\",\n  \"metaDescription\": \"Inspektre Create Project\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"GitHub CI/CD Workflow\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here below is a sample workflow. In this workflow,\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Required dependencies are installed.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Deepcode (Synk Deepcode - deepcode.ai) and CodeIntel (Microsoft AppInspector) are run.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Finally, Inspektre commands is run as below.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-name:\",\n    \"metastring\": \"\\\"Inspektre Scan\\\"\",\n    \"\\\"Inspektre\": true,\n    \"Scan\\\"\": true\n  }), \"on: push\\njobs:\\n  scan:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Checkout\\n        uses: actions/checkout@v2\\n      - name: Perform DeepCode analysis\\n        uses: georgismitev/deepcode-code-scanning-analysis@master\\n        env:\\n          DEEPCODE_TOKEN: ${{secrets.DEEPCODE_TOKEN}}\\n      - name: codeintel\\n        uses: inspektre/codeintel-gh@v1\\n      - name: setup-node\\n        uses: actions/setup-node@v2-beta\\n        with:\\n          node-version: '14'\\n      - name: install inspektre\\n        env:\\n          NPM_CONFIG_PREFIX: \\\"~/.npm-global\\\"\\n        run: |\\n          export PATH=\\\"$(yarn global bin):$PATH\\\"\\n          yarn global add @inspektre/inspektre\\n      - name: inspektre inspect\\n        env:\\n          INSPEKTRE_TOKEN: ${{secrets.INSPEKTRE_TOKEN}}\\n          INSPEKTRE_CLIENT_ID: ${{secrets.INSPEKTRE_CLIENT_ID}}\\n          INSPEKTRE_CLIENT_SECRET: ${{secrets.INSPEKTRE_CLIENT_SECRET}}\\n        run: |\\n          ~/.npm-global/bin/inspektre reauthorize\\n          ~/.npm-global/bin/inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Creating a new project\",\n  \"metaTitle\": \"Inspektre | Create\",\n  \"metaDescription\": \"Inspektre Create Project\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <section><h1 parentName=\"section\">{`GitHub CI/CD Workflow`}</h1><p parentName=\"section\">{`Here below is a sample workflow. In this workflow,`}</p><ol parentName=\"section\">\n        <li parentName=\"ol\">{`Required dependencies are installed.`}</li>\n        <li parentName=\"ol\">{`Deepcode (Synk Deepcode - deepcode.ai) and CodeIntel (Microsoft AppInspector) are run.`}</li>\n        <li parentName=\"ol\">{`Finally, Inspektre commands is run as below.`}</li>\n      </ol><p parentName=\"section\"><inlineCode parentName=\"p\">{`inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode`}</inlineCode></p><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-name:\",\n          \"metastring\": \"\\\"Inspektre Scan\\\"\",\n          \"\\\"Inspektre\": true,\n          \"Scan\\\"\": true\n        }}>{`on: push\njobs:\n  scan:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Perform DeepCode analysis\n        uses: georgismitev/deepcode-code-scanning-analysis@master\n        env:\n          DEEPCODE_TOKEN: \\${{secrets.DEEPCODE_TOKEN}}\n      - name: codeintel\n        uses: inspektre/codeintel-gh@v1\n      - name: setup-node\n        uses: actions/setup-node@v2-beta\n        with:\n          node-version: '14'\n      - name: install inspektre\n        env:\n          NPM_CONFIG_PREFIX: \"~/.npm-global\"\n        run: |\n          export PATH=\"$(yarn global bin):$PATH\"\n          yarn global add @inspektre/inspektre\n      - name: inspektre inspect\n        env:\n          INSPEKTRE_TOKEN: \\${{secrets.INSPEKTRE_TOKEN}}\n          INSPEKTRE_CLIENT_ID: \\${{secrets.INSPEKTRE_CLIENT_ID}}\n          INSPEKTRE_CLIENT_SECRET: \\${{secrets.INSPEKTRE_CLIENT_SECRET}}\n        run: |\n          ~/.npm-global/bin/inspektre reauthorize\n          ~/.npm-global/bin/inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode\n`}</code></pre></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}