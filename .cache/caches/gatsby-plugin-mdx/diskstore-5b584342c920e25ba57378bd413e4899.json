{"expireTime":9007200861964359000,"key":"gatsby-plugin-mdx-entire-payload-e1f2cee17f38ac168c9d26ed14f9461f-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"CI/CD Workflow","position":{"start":{"line":2,"column":3,"offset":3},"end":{"line":2,"column":17,"offset":17},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":17,"offset":17},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Inspektre can work in any CI/CD workflows. ","position":{"start":{"line":3,"column":1,"offset":18},"end":{"line":3,"column":44,"offset":61},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":18},"end":{"line":3,"column":44,"offset":61},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Required dependencies are installed.","position":{"start":{"line":5,"column":4,"offset":66},"end":{"line":5,"column":40,"offset":102},"indent":[]}}],"position":{"start":{"line":5,"column":4,"offset":66},"end":{"line":5,"column":40,"offset":102},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":63},"end":{"line":5,"column":40,"offset":102},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Deepcode (Synk Deepcode - deepcode.ai) and CodeIntel (Microsoft AppInspector) are run.","position":{"start":{"line":6,"column":4,"offset":106},"end":{"line":6,"column":90,"offset":192},"indent":[]}}],"position":{"start":{"line":6,"column":4,"offset":106},"end":{"line":6,"column":90,"offset":192},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":103},"end":{"line":6,"column":90,"offset":192},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Finally, Inspektre commands is run as below.","position":{"start":{"line":7,"column":4,"offset":196},"end":{"line":7,"column":48,"offset":240},"indent":[]}}],"position":{"start":{"line":7,"column":4,"offset":196},"end":{"line":7,"column":48,"offset":240},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":193},"end":{"line":7,"column":48,"offset":240},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":63},"end":{"line":7,"column":48,"offset":240},"indent":[1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Command:","position":{"start":{"line":9,"column":3,"offset":244},"end":{"line":9,"column":11,"offset":252},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":242},"end":{"line":9,"column":11,"offset":252},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode","position":{"start":{"line":10,"column":1,"offset":253},"end":{"line":10,"column":122,"offset":374},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":253},"end":{"line":10,"column":122,"offset":374},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":12,"column":3,"offset":378},"end":{"line":12,"column":7,"offset":382},"indent":[]}},{"type":"inlineCode","value":"-p <project_name>","position":{"start":{"line":12,"column":7,"offset":382},"end":{"line":12,"column":26,"offset":401},"indent":[]}},{"type":"text","value":" here represents a project name and is required.","position":{"start":{"line":12,"column":26,"offset":401},"end":{"line":12,"column":74,"offset":449},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":378},"end":{"line":12,"column":74,"offset":449},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":376},"end":{"line":12,"column":74,"offset":449},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":13,"column":3,"offset":452},"end":{"line":13,"column":7,"offset":456},"indent":[]}},{"type":"inlineCode","value":"-f <file_path>","position":{"start":{"line":13,"column":7,"offset":456},"end":{"line":13,"column":23,"offset":472},"indent":[]}},{"type":"text","value":" is to letting Inspektre know where Microsoft AppInspector results are present.","position":{"start":{"line":13,"column":23,"offset":472},"end":{"line":13,"column":102,"offset":551},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":452},"end":{"line":13,"column":102,"offset":551},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":450},"end":{"line":13,"column":102,"offset":551},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":14,"column":3,"offset":554},"end":{"line":14,"column":7,"offset":558},"indent":[]}},{"type":"inlineCode","value":"--sarif","position":{"start":{"line":14,"column":7,"offset":558},"end":{"line":14,"column":16,"offset":567},"indent":[]}},{"type":"text","value":" mode specified whether","position":{"start":{"line":14,"column":16,"offset":567},"end":{"line":14,"column":39,"offset":590},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":554},"end":{"line":14,"column":39,"offset":590},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":552},"end":{"line":14,"column":39,"offset":590},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":376},"end":{"line":14,"column":39,"offset":590},"indent":[1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Default Threat Level","position":{"start":{"line":16,"column":3,"offset":594},"end":{"line":16,"column":23,"offset":614},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":592},"end":{"line":16,"column":23,"offset":614},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The default threat level on Inspektre is L1. This value is used for both Attack Detection and ASVS. ","position":{"start":{"line":17,"column":1,"offset":615},"end":{"line":17,"column":101,"offset":715},"indent":[]}},{"type":"inlineCode","value":"--threatLevel","position":{"start":{"line":17,"column":101,"offset":715},"end":{"line":17,"column":116,"offset":730},"indent":[]}},{"type":"text","value":" Flag needs to be used to alter this (Instance: ","position":{"start":{"line":17,"column":116,"offset":730},"end":{"line":17,"column":164,"offset":778},"indent":[]}},{"type":"inlineCode","value":"inspektre inspect --threatLevel L2","position":{"start":{"line":17,"column":164,"offset":778},"end":{"line":17,"column":200,"offset":814},"indent":[]}},{"type":"text","value":"). However, we recommend remediation or supressing all attacks with the default level prior to altering threatLevel.","position":{"start":{"line":17,"column":200,"offset":814},"end":{"line":17,"column":316,"offset":930},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":615},"end":{"line":17,"column":316,"offset":930},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Github CI/CD Workflow","position":{"start":{"line":19,"column":3,"offset":934},"end":{"line":19,"column":24,"offset":955},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":932},"end":{"line":19,"column":24,"offset":955},"indent":[]}},{"type":"code","lang":"name:","meta":"\"Inspektre Scan\"","value":"on: push\njobs:\n  scan:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Perform DeepCode analysis\n        uses: georgismitev/deepcode-code-scanning-analysis@master\n        env:\n          DEEPCODE_TOKEN: ${{secrets.DEEPCODE_TOKEN}}\n      - name: codeintel\n        uses: inspektre/codeintel-gh@v1\n      - name: setup-node\n        uses: actions/setup-node@v2-beta\n        with:\n          node-version: '14'\n      - name: install inspektre\n        env:\n          NPM_CONFIG_PREFIX: \"~/.npm-global\"\n        run: |\n          export PATH=\"$(yarn global bin):$PATH\"\n          yarn global add @inspektre/inspektre\n      - name: inspektre inspect\n        env:\n          INSPEKTRE_TOKEN: ${{secrets.INSPEKTRE_TOKEN}}\n          INSPEKTRE_CLIENT_ID: ${{secrets.INSPEKTRE_CLIENT_ID}}\n          INSPEKTRE_CLIENT_SECRET: ${{secrets.INSPEKTRE_CLIENT_SECRET}}\n        run: |\n          ~/.npm-global/bin/inspektre reauthorize\n          ~/.npm-global/bin/inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode","position":{"start":{"line":20,"column":1,"offset":956},"end":{"line":52,"column":4,"offset":2100},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Creating a new project\",\"metaTitle\":\"Inspektre | Create\",\"metaDescription\":\"Inspektre Create Project\"}","position":{"start":{"line":54,"column":1,"offset":2102},"end":{"line":54,"column":141,"offset":2242},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":54,"column":141,"offset":2242}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating a new project\",\n  \"metaTitle\": \"Inspektre | Create\",\n  \"metaDescription\": \"Inspektre Create Project\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"CI/CD Workflow\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Inspektre can work in any CI/CD workflows. \"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Required dependencies are installed.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Deepcode (Synk Deepcode - deepcode.ai) and CodeIntel (Microsoft AppInspector) are run.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Finally, Inspektre commands is run as below.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Command:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-p <project_name>\"), \" here represents a project name and is required.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-f <file_path>\"), \" is to letting Inspektre know where Microsoft AppInspector results are present.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"--sarif\"), \" mode specified whether\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Default Threat Level\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The default threat level on Inspektre is L1. This value is used for both Attack Detection and ASVS. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--threatLevel\"), \" Flag needs to be used to alter this (Instance: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inspektre inspect --threatLevel L2\"), \"). However, we recommend remediation or supressing all attacks with the default level prior to altering threatLevel.\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Github CI/CD Workflow\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-name:\",\n    \"metastring\": \"\\\"Inspektre Scan\\\"\",\n    \"\\\"Inspektre\": true,\n    \"Scan\\\"\": true\n  }), \"on: push\\njobs:\\n  scan:\\n    runs-on: ubuntu-latest\\n    steps:\\n      - name: Checkout\\n        uses: actions/checkout@v2\\n      - name: Perform DeepCode analysis\\n        uses: georgismitev/deepcode-code-scanning-analysis@master\\n        env:\\n          DEEPCODE_TOKEN: ${{secrets.DEEPCODE_TOKEN}}\\n      - name: codeintel\\n        uses: inspektre/codeintel-gh@v1\\n      - name: setup-node\\n        uses: actions/setup-node@v2-beta\\n        with:\\n          node-version: '14'\\n      - name: install inspektre\\n        env:\\n          NPM_CONFIG_PREFIX: \\\"~/.npm-global\\\"\\n        run: |\\n          export PATH=\\\"$(yarn global bin):$PATH\\\"\\n          yarn global add @inspektre/inspektre\\n      - name: inspektre inspect\\n        env:\\n          INSPEKTRE_TOKEN: ${{secrets.INSPEKTRE_TOKEN}}\\n          INSPEKTRE_CLIENT_ID: ${{secrets.INSPEKTRE_CLIENT_ID}}\\n          INSPEKTRE_CLIENT_SECRET: ${{secrets.INSPEKTRE_CLIENT_SECRET}}\\n        run: |\\n          ~/.npm-global/bin/inspektre reauthorize\\n          ~/.npm-global/bin/inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Creating a new project\",\n  \"metaTitle\": \"Inspektre | Create\",\n  \"metaDescription\": \"Inspektre Create Project\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <section><h1 parentName=\"section\">{`CI/CD Workflow`}</h1><p parentName=\"section\">{`Inspektre can work in any CI/CD workflows. `}</p><ol parentName=\"section\">\n        <li parentName=\"ol\">{`Required dependencies are installed.`}</li>\n        <li parentName=\"ol\">{`Deepcode (Synk Deepcode - deepcode.ai) and CodeIntel (Microsoft AppInspector) are run.`}</li>\n        <li parentName=\"ol\">{`Finally, Inspektre commands is run as below.`}</li>\n      </ol></section>\n    <section><h1 parentName=\"section\">{`Command:`}</h1><p parentName=\"section\"><inlineCode parentName=\"p\">{`inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode`}</inlineCode></p><ul parentName=\"section\">\n        <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`-p <project_name>`}</inlineCode>{` here represents a project name and is required.`}</li>\n        <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`-f <file_path>`}</inlineCode>{` is to letting Inspektre know where Microsoft AppInspector results are present.`}</li>\n        <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`--sarif`}</inlineCode>{` mode specified whether`}</li>\n      </ul></section>\n    <section><h1 parentName=\"section\">{`Default Threat Level`}</h1><p parentName=\"section\">{`The default threat level on Inspektre is L1. This value is used for both Attack Detection and ASVS. `}<inlineCode parentName=\"p\">{`--threatLevel`}</inlineCode>{` Flag needs to be used to alter this (Instance: `}<inlineCode parentName=\"p\">{`inspektre inspect --threatLevel L2`}</inlineCode>{`). However, we recommend remediation or supressing all attacks with the default level prior to altering threatLevel.`}</p></section>\n    <section><h1 parentName=\"section\">{`Github CI/CD Workflow`}</h1><pre parentName=\"section\"><code parentName=\"pre\" {...{\n          \"className\": \"language-name:\",\n          \"metastring\": \"\\\"Inspektre Scan\\\"\",\n          \"\\\"Inspektre\": true,\n          \"Scan\\\"\": true\n        }}>{`on: push\njobs:\n  scan:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n      - name: Perform DeepCode analysis\n        uses: georgismitev/deepcode-code-scanning-analysis@master\n        env:\n          DEEPCODE_TOKEN: \\${{secrets.DEEPCODE_TOKEN}}\n      - name: codeintel\n        uses: inspektre/codeintel-gh@v1\n      - name: setup-node\n        uses: actions/setup-node@v2-beta\n        with:\n          node-version: '14'\n      - name: install inspektre\n        env:\n          NPM_CONFIG_PREFIX: \"~/.npm-global\"\n        run: |\n          export PATH=\"$(yarn global bin):$PATH\"\n          yarn global add @inspektre/inspektre\n      - name: inspektre inspect\n        env:\n          INSPEKTRE_TOKEN: \\${{secrets.INSPEKTRE_TOKEN}}\n          INSPEKTRE_CLIENT_ID: \\${{secrets.INSPEKTRE_CLIENT_ID}}\n          INSPEKTRE_CLIENT_SECRET: \\${{secrets.INSPEKTRE_CLIENT_SECRET}}\n        run: |\n          ~/.npm-global/bin/inspektre reauthorize\n          ~/.npm-global/bin/inspektre inspect -p @inspektre/inspektre -f $GITHUB_WORKSPACE/AppInspectorResults.json --sarif output.sarif --deepcode\n`}</code></pre></section>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}